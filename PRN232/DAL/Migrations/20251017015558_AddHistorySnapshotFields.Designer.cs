// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(PlantPraticeDbContext))]
    [Migration("20251017015558_AddHistorySnapshotFields")]
    partial class AddHistorySnapshotFields
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BusinessObject.Lesson.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("BusinessObject.Lesson.GradeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("GradeLevels");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonActivityItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("InteractionPatternId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonActivityStageId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotInteractionName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotInteractionShortCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("TimeInMinutes")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("InteractionPatternId");

                    b.HasIndex("LessonActivityStageId");

                    b.ToTable("LessonActivityItems");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonActivityStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("LessonPlannerId")
                        .HasColumnType("integer");

                    b.Property<string>("StageName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlannerId");

                    b.ToTable("LessonActivityStages");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonAttitude", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AttitudeTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("CustomContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("LessonPlannerId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttitudeTemplateId");

                    b.HasIndex("LessonPlannerId");

                    b.ToTable("LessonAttitudes");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonDefinition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("LessonNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("LessonTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UnitId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UnitId");

                    b.ToTable("LessonDefinitions");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonLanguageFocus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int?>("LanguageFocusTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("LessonPlannerId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LanguageFocusTypeId");

                    b.HasIndex("LessonPlannerId");

                    b.ToTable("LessonLanguageFocusItems");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonObjective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("LessonPlannerId")
                        .HasColumnType("integer");

                    b.Property<int?>("ObjectiveTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlannerId");

                    b.HasIndex("ObjectiveTemplateId");

                    b.ToTable("LessonObjectives");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonPlanner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<DateTime?>("DateOfPreparation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfTeaching")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("LessonDefinitionId")
                        .HasColumnType("integer");

                    b.Property<string>("LessonNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("LessonNumber");

                    b.Property<int?>("MethodTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotGradeLevelName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotMethodDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotMethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("UnitId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("LessonDefinitionId");

                    b.HasIndex("MethodTemplateId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("LessonPlanners");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonPreparation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("LessonPlannerId")
                        .HasColumnType("integer");

                    b.Property<string>("Materials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PreparationTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotTypeName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlannerId");

                    b.HasIndex("PreparationTypeId");

                    b.ToTable("LessonPreparations");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonSkill", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CustomContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("LessonPlannerId")
                        .HasColumnType("integer");

                    b.Property<int?>("SkillTemplateId")
                        .HasColumnType("integer");

                    b.Property<string>("SnapshotDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SnapshotSkillType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("LessonPlannerId");

                    b.HasIndex("SkillTemplateId");

                    b.ToTable("LessonSkills");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.AttitudeTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AttitudeTemplates");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.InteractionPattern", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ShortCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("InteractionPatterns");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.LanguageFocusType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("LanguageFocusTypes");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.MethodTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("MethodTemplates");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.ObjectiveTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ObjectiveTemplates");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.PreparationType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PreparationTypes");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.SkillTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("SkillTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SkillTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("SkillTemplates");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.SkillType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SkillTypes");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("integer");

                    b.Property<int>("GradeLevelId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("UnitNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevelId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("BusinessObject.OtpVerify", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Createdat")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsUsed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Otp")
                        .IsRequired()
                        .HasMaxLength(6)
                        .HasColumnType("character varying(6)");

                    b.Property<int>("Purpose")
                        .HasColumnType("integer");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExpiredAt")
                        .HasDatabaseName("IX_OtpVerify_ExpiredAt");

                    b.HasIndex("UserId");

                    b.HasIndex("Email", "Purpose", "IsUsed")
                        .HasDatabaseName("IX_OtpVerify_Email_Purpose_IsUsed");

                    b.ToTable("OtpVerifies");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.ToTable("Quizzes");
                });

            modelBuilder.Entity("BusinessObject.Quiz.QuizResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.HasIndex("UserId");

                    b.ToTable("QuizResults");
                });

            modelBuilder.Entity("BusinessObject.Quiz.UserAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("QuizResultId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("QuestionId");

                    b.HasIndex("QuizResultId");

                    b.ToTable("UserAnswers");
                });

            modelBuilder.Entity("BusinessObject.QuizOTP", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<int>("CreatedByTeacherId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int?>("MaxUsage")
                        .HasColumnType("integer");

                    b.Property<string>("OTPCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.Property<int>("UsageCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("CreatedByTeacherId");

                    b.HasIndex("QuizId");

                    b.HasIndex("OTPCode", "IsActive", "ExpiresAt")
                        .HasDatabaseName("IX_QuizOTP_Code_IsActive_ExpiresAt");

                    b.ToTable("QuizOTPs");
                });

            modelBuilder.Entity("BusinessObject.QuizOTPAccess", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AccessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OTPId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("OTPId", "StudentId")
                        .HasDatabaseName("IX_QuizOTPAccess_OTP_Student");

                    b.ToTable("QuizOTPAccesses");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("BannedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Createdat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("Createdat")
                        .HasDefaultValueSql("timezone('utc', now())");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsBanned")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Phone")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("Student");

                    b.Property<string>("Username")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("IX_User_Username");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Class", b =>
                {
                    b.HasOne("BusinessObject.Lesson.GradeLevel", "GradeLevel")
                        .WithMany("Classes")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("BusinessObject.Lesson.GradeLevel", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonActivityItem", b =>
                {
                    b.HasOne("BusinessObject.Lesson.Template.InteractionPattern", "InteractionPattern")
                        .WithMany()
                        .HasForeignKey("InteractionPatternId");

                    b.HasOne("BusinessObject.Lesson.LessonActivityStage", "LessonActivityStage")
                        .WithMany("ActivityItems")
                        .HasForeignKey("LessonActivityStageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InteractionPattern");

                    b.Navigation("LessonActivityStage");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonActivityStage", b =>
                {
                    b.HasOne("BusinessObject.Lesson.LessonPlanner", "LessonPlanner")
                        .WithMany("ActivityStages")
                        .HasForeignKey("LessonPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LessonPlanner");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonAttitude", b =>
                {
                    b.HasOne("BusinessObject.Lesson.Template.AttitudeTemplate", "AttitudeTemplate")
                        .WithMany()
                        .HasForeignKey("AttitudeTemplateId");

                    b.HasOne("BusinessObject.Lesson.LessonPlanner", "LessonPlanner")
                        .WithMany("Attitudes")
                        .HasForeignKey("LessonPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttitudeTemplate");

                    b.Navigation("LessonPlanner");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonDefinition", b =>
                {
                    b.HasOne("BusinessObject.Lesson.Unit", "Unit")
                        .WithMany("LessonDefinitions")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonLanguageFocus", b =>
                {
                    b.HasOne("BusinessObject.Lesson.Template.LanguageFocusType", "LanguageFocusType")
                        .WithMany()
                        .HasForeignKey("LanguageFocusTypeId");

                    b.HasOne("BusinessObject.Lesson.LessonPlanner", "LessonPlanner")
                        .WithMany("LanguageFocusItems")
                        .HasForeignKey("LessonPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LanguageFocusType");

                    b.Navigation("LessonPlanner");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonObjective", b =>
                {
                    b.HasOne("BusinessObject.Lesson.LessonPlanner", "LessonPlanner")
                        .WithMany("Objectives")
                        .HasForeignKey("LessonPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Lesson.Template.ObjectiveTemplate", "ObjectiveTemplate")
                        .WithMany()
                        .HasForeignKey("ObjectiveTemplateId");

                    b.Navigation("LessonPlanner");

                    b.Navigation("ObjectiveTemplate");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonPlanner", b =>
                {
                    b.HasOne("BusinessObject.Lesson.Class", "Class")
                        .WithMany("LessonPlanners")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Lesson.LessonDefinition", "LessonDefinition")
                        .WithMany("LessonPlanners")
                        .HasForeignKey("LessonDefinitionId");

                    b.HasOne("BusinessObject.Lesson.Template.MethodTemplate", "MethodTemplate")
                        .WithMany()
                        .HasForeignKey("MethodTemplateId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BusinessObject.Lesson.Unit", "Unit")
                        .WithMany("LessonPlanners")
                        .HasForeignKey("UnitId");

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("LessonDefinition");

                    b.Navigation("MethodTemplate");

                    b.Navigation("Unit");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonPreparation", b =>
                {
                    b.HasOne("BusinessObject.Lesson.LessonPlanner", "LessonPlanner")
                        .WithMany("Preparations")
                        .HasForeignKey("LessonPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Lesson.Template.PreparationType", "PreparationType")
                        .WithMany()
                        .HasForeignKey("PreparationTypeId");

                    b.Navigation("LessonPlanner");

                    b.Navigation("PreparationType");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonSkill", b =>
                {
                    b.HasOne("BusinessObject.Lesson.LessonPlanner", "LessonPlanner")
                        .WithMany("Skills")
                        .HasForeignKey("LessonPlannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Lesson.Template.SkillTemplate", "SkillTemplate")
                        .WithMany()
                        .HasForeignKey("SkillTemplateId");

                    b.Navigation("LessonPlanner");

                    b.Navigation("SkillTemplate");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.AttitudeTemplate", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.InteractionPattern", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.LanguageFocusType", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.MethodTemplate", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.ObjectiveTemplate", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.PreparationType", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.SkillTemplate", b =>
                {
                    b.HasOne("BusinessObject.Lesson.Template.SkillType", "SkillType")
                        .WithMany()
                        .HasForeignKey("SkillTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SkillType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Template.SkillType", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Unit", b =>
                {
                    b.HasOne("BusinessObject.Lesson.GradeLevel", "GradeLevel")
                        .WithMany("Units")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GradeLevel");
                });

            modelBuilder.Entity("BusinessObject.OtpVerify", b =>
                {
                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("OtpVerifies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Answer", b =>
                {
                    b.HasOne("BusinessObject.Quiz.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Question", b =>
                {
                    b.HasOne("BusinessObject.Quiz.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Quiz", b =>
                {
                    b.HasOne("BusinessObject.User", "Creator")
                        .WithMany("CreatedQuizzes")
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("BusinessObject.Quiz.QuizResult", b =>
                {
                    b.HasOne("BusinessObject.Quiz.Quiz", "Quiz")
                        .WithMany("QuizResults")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "User")
                        .WithMany("QuizResults")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BusinessObject.Quiz.UserAnswer", b =>
                {
                    b.HasOne("BusinessObject.Quiz.Answer", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Quiz.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.Quiz.QuizResult", "QuizResult")
                        .WithMany("UserAnswers")
                        .HasForeignKey("QuizResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("QuizResult");
                });

            modelBuilder.Entity("BusinessObject.QuizOTP", b =>
                {
                    b.HasOne("BusinessObject.User", "CreatedByTeacher")
                        .WithMany()
                        .HasForeignKey("CreatedByTeacherId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BusinessObject.Quiz.Quiz", "Quiz")
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByTeacher");

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("BusinessObject.QuizOTPAccess", b =>
                {
                    b.HasOne("BusinessObject.QuizOTP", "OTP")
                        .WithMany("AccessLogs")
                        .HasForeignKey("OTPId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BusinessObject.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OTP");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Class", b =>
                {
                    b.Navigation("LessonPlanners");
                });

            modelBuilder.Entity("BusinessObject.Lesson.GradeLevel", b =>
                {
                    b.Navigation("Classes");

                    b.Navigation("Units");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonActivityStage", b =>
                {
                    b.Navigation("ActivityItems");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonDefinition", b =>
                {
                    b.Navigation("LessonPlanners");
                });

            modelBuilder.Entity("BusinessObject.Lesson.LessonPlanner", b =>
                {
                    b.Navigation("ActivityStages");

                    b.Navigation("Attitudes");

                    b.Navigation("LanguageFocusItems");

                    b.Navigation("Objectives");

                    b.Navigation("Preparations");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("BusinessObject.Lesson.Unit", b =>
                {
                    b.Navigation("LessonDefinitions");

                    b.Navigation("LessonPlanners");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Question", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("BusinessObject.Quiz.Quiz", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizResults");
                });

            modelBuilder.Entity("BusinessObject.Quiz.QuizResult", b =>
                {
                    b.Navigation("UserAnswers");
                });

            modelBuilder.Entity("BusinessObject.QuizOTP", b =>
                {
                    b.Navigation("AccessLogs");
                });

            modelBuilder.Entity("BusinessObject.User", b =>
                {
                    b.Navigation("CreatedQuizzes");

                    b.Navigation("OtpVerifies");

                    b.Navigation("QuizResults");
                });
#pragma warning restore 612, 618
        }
    }
}
